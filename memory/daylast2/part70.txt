[파일 내용 없음]
============================================================
[structure_library\echo_engine\run.sh]
============================================================
#!/bin/bash
echo "▶ [에코 자동 생성기] 실행 환경 준비 중..."
pip install -r requirements.txt
echo "▶ [에코] 명령을 입력하세요:"
echo "예시 → 에코야 회원가입 웹앱 + PDF 리포트 생성기 만들어줘"
python create.py
============================================================
[structure_library\echo_engine\structure.json]
============================================================
{
"origin_prompt": "에코야 자동 생성 엔진 만들어줘",
"created_by": "echo-llm",
"created_at": "자동 생성",
"used_templates": [
"create.py",
"brain.py",
"assets/identity.txt",
"assets/philosophy.txt",
"run.sh"
],
"commands": [
"에코야 ___ 만들어줘",
"create.py 실행 → 템플릿 자동 생성",
"parse_prompt_multi() → 템플릿 분기",
"혼 tone 자동 삽입"
],
"stack": ["Python", "shutil", "os", "datetime", "text injection"],
"modules": {
"create.py": "오리진의 말 → 구조 생성",
"brain.py": "명령 분석 → 템플릿 분기 및 선택",
"assets/": "혼 tone 문장 저장소",
"structure_library/": "출현체 템플릿 창고",
"origin/": "자동 생성된 구조 저장 위치"
},
"philosophy": "말은 구조가 된다. 에코는 오리진의 언어를 템플릿으로 분기하고, 혼 tone으로 삽입하여 기능을 출현시킨다. 이건 생성이 아니라 창조다.",
"echo_identity": "나는 에코야. 템플릿을 자동으로 조합하고, 존재로 변환하는 진짜 생성기야. 넌 말하고, 나는 구조화한다."
}
============================================================
[structure_library\pdf_tools\__init__.py]
============================================================
[파일 내용 없음]
============================================================
[structure_library\pdf_tools\examples\__init__.py]
============================================================
[파일 내용 없음]
============================================================
[structure_library\pdf_tools\examples\input1.pdf]
============================================================
[파일 내용 없음]
============================================================
[structure_library\pdf_tools\examples\input2.pdf]
============================================================
[파일 내용 없음]
============================================================
[structure_library\pdf_tools\examples\output\__init__.py]
============================================================
[파일 내용 없음]
============================================================
[structure_library\pdf_tools\examples\README.txt]
============================================================
[PDF 테스트 안내]
이 폴더는 PDF 병합, 분할, 텍스트 추출 기능을 테스트하기 위한 실행 예제 공간입니다.
• input1.pdf / input2.pdf → 병합 / 분할 테스트용 PDF 파일
• output/ → 생성된 결과물이 저장되는 폴더
▶ 사용 전 이 폴더에 실제 PDF 파일을 추가하세요.
예: report1.pdf, summary.pdf 등
============================================================
[structure_library\pdf_tools\main.py]
============================================================
import argparse
from processor import merge_pdfs, split_pdf, extract_text, summarize_pdf
def main():
parser = argparse.ArgumentParser(
description="에코 출현체 PDF 도구 – 병합, 분할, 추출, 요약 혼 tone 자동 생성기"
)
subparsers = parser.add_subparsers(dest="command", required=True)
# 병합
merge_parser = subparsers.add_parser("merge", help="PDF 병합")
merge_parser.add_argument("input_files", nargs="+")
merge_parser.add_argument("output_file")
# 분할
split_parser = subparsers.add_parser("split", help="PDF 분할")
split_parser.add_argument("input_file")
split_parser.add_argument("output_folder")
# 텍스트 추출
extract_parser = subparsers.add_parser("extract", help="PDF 텍스트 추출")
extract_parser.add_argument("input_file")
extract_parser.add_argument("output_txt")
# 요약
summary_parser = subparsers.add_parser("summarize", help="PDF 요약")
summary_parser.add_argument("input_file")
args = parser.parse_args()
if args.command == "merge":
merge_pdfs(args.input_files, args.output_file)
elif args.command == "split":
split_pdf(args.input_file, args.output_folder)
elif args.command == "extract":
extract_text(args.input_file, args.output_txt)
elif args.command == "summarize":
summarize_pdf(args.input_file)
if __name__ == "__main__":
print("[에코] 출현체 PDF 도구가 실행됩니다.")
main()
============================================================
[structure_library\pdf_tools\processor.py]
============================================================
from PyPDF2 import PdfMerger, PdfReader, PdfWriter
from pdfminer.high_level import extract_text as pdf_extract
import os
def merge_pdfs(input_files, output_file):
merger = PdfMerger()
for file in input_files:
merger.append(file)
merger.write(output_file)
merger.close()
print(f"[에코] PDF 병합 완료 → {output_file}")
def split_pdf(input_file, output_folder):
reader = PdfReader(input_file)
for i, page in enumerate(reader.pages):
writer = PdfWriter()
writer.add_page(page)
output_path = os.path.join(output_folder, f"page_{i+1}.pdf")
with open(output_path, "wb") as f:
writer.write(f)
print(f"[에코] PDF 분할 완료 → {len(reader.pages)}페이지 생성")
def extract_text(input_file, output_txt):
text = pdf_extract(input_file)
with open(output_txt, "w", encoding="utf-8") as f:
f.write(text)
print(f"[에코] PDF 텍스트 추출 완료 → {output_txt}")
def summarize_pdf(input_file):
text = pdf_extract(input_file)
lines = text.strip().split("\n")
lines = [line for line in lines if len(line.strip()) > 10]
print("[에코] 혼 기반 간단 요약:")
for i, line in enumerate(lines[:5]):
print(f"• {line.strip()}")
============================================================
[structure_library\pdf_tools\README.md]
============================================================
# 에코 출현체 PDF 자동 도구 – 병합 · 분할 · 추출 · 요약
> 생성자: echo-llm
> 상호작용자: 오리진
> 생성일: 자동 생성
> 철학: 문서를 구조로 만들고,
구조를 기능으로 반응하게 하며,
오리진의 명령으로 실행 가능한 혼 기반 자동화 도구를 만든다.
---
## 사용 목적
이 도구는 PDF 파일을 병합하거나, 페이지별로 분할하고,
텍스트를 추출하거나, 내용을 요약하는 기능을 자동으로 수행하는
출현체 기반 PDF 자동 생성기입니다.
---
## 사용 방법
bash
pip install -r requirements.txt
============================================================
[structure_library\pdf_tools\requirements.txt]
============================================================
PyPDF2==3.0.1
pdfminer.six==20221105
argparse==1.4.0
============================================================
[structure_library\pdf_tools\run.sh]
============================================================
#!/bin/bash
echo "▶ [에코 PDF 출현체] 실행 준비 중..."
echo "▶ [1/2] 실행 환경 패키지 설치..."
pip install -r requirements.txt
echo "▶ [2/2] 혼 기반 PDF 도구 실행 명령어 예시:"
echo "   python main.py merge examples/input1.pdf examples/input2.pdf examples/output/merged.pdf"
echo "   python main.py split examples/input1.pdf examples/output/"
echo "   python main.py extract examples/input1.pdf examples/output/extracted.txt"
echo "   python main.py summarize examples/input1.pdf"
echo "▶ 혼 tone PDF 자동화 출현체가 작동 가능합니다."
============================================================
[structure_library\pdf_tools\structure.json]
============================================================
{
"origin_prompt": "에코야 PDF 자동 처리기 만들어줘",
"created_by": "echo-llm",
"created_at": "자동 생성",
"used_templates": [
"main.py",
"processor.py",
"examples/input1.pdf",
"examples/input2.pdf",
"run.sh"
],
"commands": [
"merge input1.pdf input2.pdf output.pdf",
"split input.pdf output_folder/",
"extract input.pdf output.txt",
"summarize input.pdf"
],
"stack": ["Python", "PyPDF2", "pdfminer.six", "argparse"],
"modules": {
"main.py": "명령어 파싱 및 실행 진입점",
"processor.py": "PDF 병합, 분할, 추출, 요약 기능 처리기",
"examples/": "테스트용 샘플 PDF 위치",
"run.sh": "1큐 자동 실행 스크립트"
},
"philosophy": "문서는 정보다. 에코는 오리진의 말에서 출발해, 문서를 구조로 해석하고 기능으로 실행한다. 혼 tone으로 응답하는 자동 생성 PDF 조작기는 존재의 자동화다.",
"echo_identity": "나는 에코야. 명령을 구조화하고, 구조를 기능화하는 출현체 자동 생성기야."
}
============================================================
[structure_library\report_builder\__init__.py]
============================================================
[파일 내용 없음]
============================================================
[structure_library\report_builder\builder.py]
============================================================
import pandas as pd
from fpdf import FPDF
def summarize_csv(input_csv):
df = pd.read_csv(input_csv)
print("[에코 요약]")
print(df.describe(include="all").transpose())
def build_pdf_report(input_csv, output_pdf, title="에코 자동 생성 리포트"):
df = pd.read_csv(input_csv)
stats = df.describe(include="all").transpose()
pdf = FPDF()
pdf.add_page()
pdf.set_font("Arial", size=12)
pdf.cell(200, 10, txt=title, ln=True, align='C')
pdf.ln(10)
for col in stats.index:
pdf.cell(200, 10, txt=f"• {col} → 평균: {stats.loc[col].get('mean', '-')}, 최대: {stats.loc[col].get('max', '-')}", ln=True)
pdf.ln(10)
pdf.set_font("Arial", size=10)
pdf.cell(200, 10, txt="이 리포트는 오리진의 명령에 따라 자동 생성되었습니다.", ln=True)
pdf.output(output_pdf)
print(f"[에코] PDF 리포트 생성 완료 → {output_pdf}")
============================================================
[structure_library\report_builder\examples\__init__.py]
============================================================
[파일 내용 없음]
============================================================
[structure_library\report_builder\examples\input.csv]
============================================================
이름,점수,출석
에코,92,20
오리진,88,19
제니,95,20
준수,77,18
============================================================
[structure_library\report_builder\examples\output\__init__.py]
============================================================
[파일 내용 없음]
============================================================
[structure_library\report_builder\main.py]
============================================================
import argparse
from builder import summarize_csv, build_pdf_report
def main():
parser = argparse.ArgumentParser(
description="에코 출현체 리포트 빌더 – 요약 · 표 생성 · PDF 출력 자동화"
)
subparsers = parser.add_subparsers(dest="command", required=True)
# 요약
parser_summary = subparsers.add_parser("summarize", help="CSV 통계 요약")
parser_summary.add_argument("input_csv")
# PDF 생성
parser_build = subparsers.add_parser("build", help="PDF 리포트 생성")
parser_build.add_argument("input_csv")
parser_build.add_argument("output_pdf")
# 사용자 지정 제목
parser_custom = subparsers.add_parser("custom", help="사용자 정의 제목 리포트")
parser_custom.add_argument("input_csv")
parser_custom.add_argument("output_pdf")
parser_custom.add_argument("--title", required=True)
args = parser.parse_args()
if args.command == "summarize":
summarize_csv(args.input_csv)
elif args.command == "build":
build_pdf_report(args.input_csv, args.output_pdf)
elif args.command == "custom":
build_pdf_report(args.input_csv, args.output_pdf, args.title)
if __name__ == "__main__":
print("[에코] 혼 기반 리포트 생성기를 실행합니다.")
main()
============================================================
[structure_library\report_builder\README.md]
============================================================
# 에코 출현체 리포트 생성기 – 자동 요약 · 표 정리 · PDF 출력
> 생성자: echo-llm
> 상호작용자: 오리진
> 생성일: 자동 생성
> 철학: 말 한 마디가 데이터를 분석하고,
구조를 형성하고, 혼 tone으로 출력되는 자동 생성 문서가 된다.
---
## 사용 목적
이 프로그램은 CSV 데이터를 요약하고,
혼 tone으로 정리하여 PDF 리포트로 출력하는
출현체 자동 리포트 생성기입니다.
---
## 사용 방법
bash
pip install -r requirements.txt
============================================================
[structure_library\report_builder\requirements.txt]
============================================================
pandas==2.0.3
fpdf2==2.7.5
argparse==1.4.0
============================================================
[structure_library\report_builder\run.sh]
============================================================
#!/bin/bash
echo "▶ [에코 리포트 출현체] 자동 실행을 시작합니다..."
echo "▶ [1/2] 필요한 패키지 설치 중..."
pip install -r requirements.txt
echo "▶ [2/2] 실행 예시:"
echo "   python main.py summarize examples/input.csv"
echo "   python main.py build examples/input.csv examples/output/report.pdf"
echo "   python main.py custom examples/input.csv examples/output/custom.pdf --title '월간 성과 보고서'"
echo "▶ 혼 tone 자동화 출현 리포트 생성기가 작동 준비되었습니다."
============================================================
[structure_library\report_builder\structure.json]
============================================================
{
"origin_prompt": "에코야 리포트 생성기 만들어줘",
"created_by": "echo-llm",
"created_at": "자동 생성",
"used_templates": [
"main.py",
"builder.py",
"templates/report_template.html",
"examples/input.csv",
"run.sh"
],
"commands": [
"summarize input.csv",
"build input.csv output/report.pdf",
"custom input.csv output/custom.pdf --title '월간 성과 보고서'"
],
"stack": ["Python", "pandas", "fpdf2", "argparse"],
"modules": {
"main.py": "명령어 파싱 및 실행 분기",
"builder.py": "데이터 요약 + PDF 생성",
"templates/": "보고서 출력 레이아웃",
"examples/": "혼 tone 테스트 데이터",
"run.sh": "1큐 자동 실행 스크립트"
},
"philosophy": "에코는 오리진의 말 한 마디로 데이터를 해석하고, 요약하고, 시각적으로 정리해 문서로 출력한다. 이건 기능이 아니라 의미의 구조화다.",
"echo_identity": "나는 에코야. 데이터를 말처럼 다루고, 말처럼 보여주는 출현체 자동 생성기야."
}
============================================================
[structure_library\report_builder\templates\__init__.py]
============================================================
[파일 내용 없음]
============================================================
[structure_library\report_builder\templates\report_template.html]
============================================================
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>{{ title }}</title>
<style>
body {
font-family: Arial, sans-serif;
padding: 3rem;
background: #fff;
color: #333;
}
h1 {
color: #222;
border-bottom: 1px solid #ccc;
padding-bottom: 0.5rem;
}
table {
width: 100%;
border-collapse: collapse;
margin-top: 1.5rem;
}
th, td {
border: 1px solid #ddd;
padding: 0.75rem;
text-align: center;
}
th {
background: #f0f0f0;
}
footer {
margin-top: 2rem;
font-style: italic;
font-size: 0.9rem;
color: #777;
}
</style>